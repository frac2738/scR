% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parser_cell_type_markers.R
\name{Parser}
\alias{Parser}
\title{Parsing the Garnett marker file}
\description{
Garnett uses a marker file to allow users to specify cell type definitions.
While the marker file is designed to be easy to construct and human-readable,
it is parsed by Garnett automatically, and so it needs to follow certain
formatting constraints.
}
\details{
The following describes the constraints necessary in the input to the
\code{marker_file} argument of \code{\link{train_cell_classifier}} and
\code{\link{check_markers}}.
}
\section{Elements of a cell type description}{

The basic structure of the Garnett marker file is a series of entries, each
describing elements of a cell type. After the cell name, each additional
line will be a descriptor, which begins with a keyword, followed by a colon
(':'). After the colon, a series of specifications can be added, separated
by commas (','). Descriptors may spill onto following lines so long as you
do not split a specification across multiple lines (i.e. if breaking up a
long descriptor across multiple lines, all but the last line should end with
a comma). Each new descriptor should begin on a new line. A generic cell
type entry looks like this:

```
> cell type name
descriptor: spec1, spec2,
spec3, spec4
descriptor2: spec1
```

The following are the potential descriptors:
\describe{
  \item{cell name}{\strong{Required} Each cell type must have a unique name,
  and the name should head the cell type description. To indicate a new cell
  type, use the \code{>} symbol, followed by the cell name, followed by a
  new line. For example, \code{> T cell}.}
  \item{expressed:}{\strong{Required} After the cell name, the minimal
  requirement for each cell type is the name of a single marker gene. The
  line in the marker file will begin with \code{expressed:}, followed by one
  or more gene names separated by commas. The last gene name of the
  descriptor is not followed by a comma. Gene IDs can be of any type
  (ENSEMBL, SYMBOL, etc.) that is present in the Bioconductor
  \code{\link[AnnotationDbi]{AnnotationDb-class}} package for your species.
  (See available packages on the
  \href{http://bioconductor.org/packages/3.8/data/annotation/}{Bioconductor website}).
  For example, for human, use \code{\link[org.Hs.eg.db]{org.Hs.eg.db}}. To
  see available gene ID types, you can run \code{columns(db)}. You will
  specify which gene ID type you used when calling
  \code{\link{train_cell_classifier}}.} If your species does not have an
  annotation dataset of type \code{\link[AnnotationDbi]{AnnotationDb-class}},
  you can set \code{db = 'none'}, however Garnett will then not convert gene
  ID types, so CDS and marker file gene ID types need to be the same.
  \item{not expressed:}{In addition to
  specifying genes that the cell type should express, you can also specify
  genes that your cell type should not express. Details on specifying genes
  are the same as for \code{expressed:}.}
  \item{subtype of:}{When present, this descriptor specifies that a cell
  type is a subtype of another cell type that is also described in the
  marker file. A biological example would be a CD4 T cell being a subtype of
  a T cell. This descriptor causes the cell type to be classified on a
  separate sub-level of the classification hierarchy, after the
  classification of its parent type is done (i.e. first T cells are
  discriminated from other cell types, then the T cells are subclassified
  using any cell types with the descriptor \code{subtype of: T cell}).
  \code{subtype of:} can only include a single specification, and the
  specification must be the exact name of another cell type specified in
  this marker file.}
  \item{references:}{This descriptor is not required, but is highly
  recommended. The specifications for this descriptor should be links/DOIs
  documenting how you chose your marker genes. While these specifications
  will not influence cell type classification, they will be packaged with
  the built classifier so that future users of the classifier can trace the
  origins of the markers/ }
  \item{*meta data:}{This wildcard descriptor allows you to specify any
  other property of a cell type that you wish to specify. The keyword will
  be the name of the column in your \code{pData} (meta data) table that you
  wish to specify, and the specifications will be a list of acceptable
  values for that meta data. An example use of this would be
  \code{tissue: liver, kidney}, which would specify that training cells for
  this cell type must have "liver" or "kidney" as their entry in the
  "tissue" column of the \code{pData} table.}
  \item{expressed below:}{While we recommend that you use \code{expressed:}
  and \code{not expressed:} to specify the cell type's marker genes, because
  these terms utilize the entirety of Garnett's built-in normalization and
  standardization, you can also specify expression using the following
  logical descriptors
  \code{expressed below:, expressed above:, expressed between:}.
  Note that no normalization occurs with these descriptors; they are used as
  logical gates only. To specify \code{expressed below:}, use the gene name,
  followed by a space, followed by a number. This will only allow training
  cells that have this gene expressed below the given value \strong{in the
  units of the expression matrix provided}. For example,
  \code{expressed below: MYOD1 7, MYH3 2}.}
  \item{expressed above:}{Similar to \code{expressed below:}, but will only
  allow training cells expressing the given gene above the value provided.}
  \item{expressed between:}{Similar to \code{expressed below:}, but provide
  two values separated by spaces. For example
  \code{expressed between: ACT5 2 5.5, ACT2 1 2.7}. This descriptor will
  only allow training cells expressing the given gene between the two values
  provided.}
}
}

\section{Checking your marker file}{


Because only specific expressed markers are useful for Garnett
classification, we recommend that you always check your marker file for
ambiguity before proceeding with classification. To do this, we have
provided the functions \code{\link{check_markers}} and
\code{\link{plot_markers}} to facilitate marker checking. See that manual
pages for those functions for details.
}

\seealso{
\code{\link{train_cell_classifier}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Parser-p_file_1}{\code{Parser$p_file_1()}}
\item \href{#method-Parser-p_file_2}{\code{Parser$p_file_2()}}
\item \href{#method-Parser-p_header_start}{\code{Parser$p_header_start()}}
\item \href{#method-Parser-p_header_1}{\code{Parser$p_header_1()}}
\item \href{#method-Parser-p_celltype_1}{\code{Parser$p_celltype_1()}}
\item \href{#method-Parser-p_celltype_2}{\code{Parser$p_celltype_2()}}
\item \href{#method-Parser-p_rule_head_1}{\code{Parser$p_rule_head_1()}}
\item \href{#method-Parser-p_rule_head_comp_1}{\code{Parser$p_rule_head_comp_1()}}
\item \href{#method-Parser-p_rule_head_2}{\code{Parser$p_rule_head_2()}}
\item \href{#method-Parser-p_rule_1}{\code{Parser$p_rule_1()}}
\item \href{#method-Parser-p_rule_2}{\code{Parser$p_rule_2()}}
\item \href{#method-Parser-p_rule_3}{\code{Parser$p_rule_3()}}
\item \href{#method-Parser-p_expression_1}{\code{Parser$p_expression_1()}}
\item \href{#method-Parser-p_expression_2}{\code{Parser$p_expression_2()}}
\item \href{#method-Parser-p_expression_3}{\code{Parser$p_expression_3()}}
\item \href{#method-Parser-p_expression_4}{\code{Parser$p_expression_4()}}
\item \href{#method-Parser-p_comp_expression_1}{\code{Parser$p_comp_expression_1()}}
\item \href{#method-Parser-p_comp_expression_2}{\code{Parser$p_comp_expression_2()}}
\item \href{#method-Parser-p_comp_expression_3}{\code{Parser$p_comp_expression_3()}}
\item \href{#method-Parser-p_comp_expression_4}{\code{Parser$p_comp_expression_4()}}
\item \href{#method-Parser-p_comp_expression_5}{\code{Parser$p_comp_expression_5()}}
\item \href{#method-Parser-p_comp_expression_6}{\code{Parser$p_comp_expression_6()}}
\item \href{#method-Parser-p_error}{\code{Parser$p_error()}}
\item \href{#method-Parser-clone}{\code{Parser$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_file_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_file_1}{}}}
\subsection{Method \code{p_file_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_file_1(doc = "file : NEWLINE file", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_file_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_file_2}{}}}
\subsection{Method \code{p_file_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_file_2(
  doc = "file : celltype\\n                                | file celltype",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_header_start"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_header_start}{}}}
\subsection{Method \code{p_header_start()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_header_start(
  doc =
    "header_start : '>' NAME\\n                                                | '>' NUM\\n                                                | header_start NUM\\n                                                | header_start NAME",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_header_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_header_1}{}}}
\subsection{Method \code{p_header_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_header_1(doc = "header : header_start NEWLINE", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_celltype_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_celltype_1}{}}}
\subsection{Method \code{p_celltype_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_celltype_1(doc = "celltype : header", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_celltype_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_celltype_2}{}}}
\subsection{Method \code{p_celltype_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_celltype_2(doc = "celltype : celltype rule", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_head_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_head_1}{}}}
\subsection{Method \code{p_rule_head_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_head_1(doc = "rule_head : SIMP_KEY ':'", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_head_comp_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_head_comp_1}{}}}
\subsection{Method \code{p_rule_head_comp_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_head_comp_1(doc = "rule_head_comp : KEYWORD ':'", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_head_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_head_2}{}}}
\subsection{Method \code{p_rule_head_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_head_2(doc = "rule_head : NAME ':'", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_1}{}}}
\subsection{Method \code{p_rule_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_1(doc = "rule : rule_head expression NEWLINE", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_2}{}}}
\subsection{Method \code{p_rule_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_2(doc = "rule : rule_head_comp comp_expression NEWLINE", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_rule_3"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_rule_3}{}}}
\subsection{Method \code{p_rule_3()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_rule_3(doc = "rule : rule NEWLINE", p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_expression_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_expression_1}{}}}
\subsection{Method \code{p_expression_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_expression_1(
  doc = "expression : NAME\\n                                              | NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_expression_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_expression_2}{}}}
\subsection{Method \code{p_expression_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_expression_2(
  doc =
    "expression : expression NAME\\n                                              | expression NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_expression_3"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_expression_3}{}}}
\subsection{Method \code{p_expression_3()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_expression_3(
  doc =
    "expression : expression ',' NAME\\n                                              | expression ',' NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_expression_4"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_expression_4}{}}}
\subsection{Method \code{p_expression_4()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_expression_4(
  doc =
    "expression : expression ',' NEWLINE NAME\\n                                              | expression ',' NEWLINE NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_1"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_1}{}}}
\subsection{Method \code{p_comp_expression_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_1(
  doc =
    "comp_expression : NAME\\n                                                        | NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_2"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_2}{}}}
\subsection{Method \code{p_comp_expression_2()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_2(
  doc =
    "comp_expression : comp_expression NUM\\n                                                        | comp_expression NAME",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_3"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_3}{}}}
\subsection{Method \code{p_comp_expression_3()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_3(
  doc = "comp_expression : comp_expression ',' NAME NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_4"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_4}{}}}
\subsection{Method \code{p_comp_expression_4()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_4(
  doc = "comp_expression : comp_expression ',' NEWLINE NAME NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_5"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_5}{}}}
\subsection{Method \code{p_comp_expression_5()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_5(
  doc = "comp_expression : comp_expression ',' NAME NUM NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_comp_expression_6"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_comp_expression_6}{}}}
\subsection{Method \code{p_comp_expression_6()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_comp_expression_6(
  doc = "comp_expression : comp_expression ',' NEWLINE NAME NUM NUM",
  p
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-p_error"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-p_error}{}}}
\subsection{Method \code{p_error()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$p_error(p)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Parser-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Parser-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Parser$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
